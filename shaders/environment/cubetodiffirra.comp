#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform samplerCube sourceMap;
layout(set = 1, binding = 0, rgba32f) writeonly uniform imageCube diffuseMap;


const float PI = 3.14159265359;


layout(push_constant) uniform PushConstants {
    float sampleDelta;
} pushConstants;



void main()
{
	ivec3 storePos = ivec3(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.z);
    vec2 uv = (vec2(storePos.xy) + 0.5) / vec2(imageSize(diffuseMap).xy); // Normalized coordinates
    uv = uv * 2.0 - 1.0; // Map to range [-1, 1]

    vec3 direction;
    switch (storePos.z) {
        case 0: direction = normalize(vec3(1.0, -uv.y, -uv.x)); break; // +X
        case 1: direction = normalize(vec3(-1.0, -uv.y, uv.x)); break; // -X
        case 2: direction = normalize(vec3(uv.x, 1.0, uv.y)); break; // +Y
        case 3: direction = normalize(vec3(uv.x, -1.0, -uv.y)); break; // -Y
        case 4: direction = normalize(vec3(uv.x, -uv.y, 1.0)); break; // +Z
        case 5: direction = normalize(vec3(-uv.x, -uv.y, -1.0)); break; // -Z
        default: direction = vec3(0.0); break; // Should not happen
    }

    vec3 irradiance = vec3(0.0);

    // Convolution Code
    vec3 up    = vec3(0.0, 1.0, 0.0);
    if (abs(direction.y) > 0.999) { // Handle parallel case
        up = vec3(0.0, 0.0, 1.0);
    }
    vec3 right = normalize(cross(up, direction));
    up         = normalize(cross(direction, right));

    float sampleDelta = pushConstants.sampleDelta;
    float nrSamples = 0.0; 
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * direction; 
    
            irradiance += texture(sourceMap, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }

    irradiance = PI * irradiance * (1.0 / float(nrSamples));

    vec4 out_irradiance = vec4(irradiance, 1.0);
    imageStore(diffuseMap, storePos, out_irradiance);
}
