#version 460

#extension GL_EXT_buffer_reference : require

layout(local_size_x = 64) in;

struct MeshBounds
{
    vec3 position;
    float radius;
};

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

layout(buffer_reference, std430) readonly buffer MeshBoundsBuffer
{
    MeshBounds meshBounds[];
};

layout(buffer_reference, std430) buffer CommandBuffer
{
    VkDrawIndexedIndirectCommand commands[];
};

layout(buffer_reference, std430) buffer ModelBuffer
{
    mat4 modelMatrices[];
};


layout(set = 0, binding = 0) uniform bufferData
{
    MeshBoundsBuffer boundsBuffer;
    CommandBuffer commandBuffer;
    uint commandBufferCount;
    ModelBuffer modelMatrixBuffer;
} buffers;

layout (push_constant) uniform PushConstants {
    mat4 viewProj;  // (64)
    vec4 cameraPos; // (16) - w is for alignment
    // (16)
    // (16)
    // (16)
} pushConstants;

bool check_is_visible(mat4 mat, vec3 origin, float radius)
{
    uint plane_index = 0;
    for (uint i = 0; i < 3; ++i)
    {
        for (uint j = 0; j < 2; ++j, ++plane_index)
        {
            if (plane_index == 2 || plane_index == 3)
            {
                continue;
            }
            const float sign  = (j > 0) ? 1.f : -1.f;
            vec4        plane = vec4(0, 0, 0, 0);
            for (uint k = 0; k < 4; ++k)
            {
                plane[k] = mat[k][3] + sign * mat[k][i];
            }
            plane.xyzw /= sqrt(dot(plane.xyz, plane.xyz));
            if (dot(origin, plane.xyz) + plane.w + radius < 0)
            {
                return false;
            }
        }
    }
    return true;
}

void main()
{
    uint invocationId = gl_GlobalInvocationID.x;
    if (invocationId >= buffers.commandBufferCount) { return; }

    mat4 modelMatrix = buffers.modelMatrixBuffer.modelMatrices[invocationId];

    // only ever modify instanceCount to frustum Cull
    buffers.commandBuffer.commands[invocationId].instanceCount = 0;

}