#version 460

#extension GL_EXT_buffer_reference : require

#include "scene.glsl"
#include "structure.glsl"

layout(local_size_x = 64) in;

// layout (std140, set = 0, binding = 0) uniform SceneData - scene.glsl

layout (set = 1, binding = 0) uniform VisibilityPassData
{
    Instances instances;
    Models models;
    PrimitiveData primitives;
    CommandBuffer opaqueCommands;
    CommandBuffer transparentCommands;
    CommandBuffer shadowCommands;
    DrawCounts drawCounts;
} visibilityPassData;


layout (push_constant) uniform PushConstants {
    int bEnableFrustumCull;
} push;

bool checkIsVisible(mat4 viewProj, vec3 worldPos, float worldRadius)
{
    // Left plane: row3 + row0
    vec4 plane = vec4(viewProj[0][3] + viewProj[0][0],
    viewProj[1][3] + viewProj[1][0],
    viewProj[2][3] + viewProj[2][0],
    viewProj[3][3] + viewProj[3][0]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    // Right plane: row3 - row0
    plane = vec4(viewProj[0][3] - viewProj[0][0],
    viewProj[1][3] - viewProj[1][0],
    viewProj[2][3] - viewProj[2][0],
    viewProj[3][3] - viewProj[3][0]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    // Bottom plane: row3 + row1
    plane = vec4(viewProj[0][3] + viewProj[0][1],
    viewProj[1][3] + viewProj[1][1],
    viewProj[2][3] + viewProj[2][1],
    viewProj[3][3] + viewProj[3][1]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    // Top plane: row3 - row1
    plane = vec4(viewProj[0][3] - viewProj[0][1],
    viewProj[1][3] - viewProj[1][1],
    viewProj[2][3] - viewProj[2][1],
    viewProj[3][3] - viewProj[3][1]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    // Near plane: row3 + row2
    plane = vec4(viewProj[0][3] + viewProj[0][2],
    viewProj[1][3] + viewProj[1][2],
    viewProj[2][3] + viewProj[2][2],
    viewProj[3][3] + viewProj[3][2]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    // Far plane: row3 - row2
    plane = vec4(viewProj[0][3] - viewProj[0][2],
    viewProj[1][3] - viewProj[1][2],
    viewProj[2][3] - viewProj[2][2],
    viewProj[3][3] - viewProj[3][2]);
    if (dot(worldPos, plane.xyz) + plane.w < -worldRadius * length(plane.xyz)) return false;

    return true;
}

void main()
{
    uint invocationId = gl_GlobalInvocationID.x;
    if (invocationId >= visibilityPassData.drawCounts.indirectCount.limit) { return; }

    Instance instanceData = visibilityPassData.instances.instanceArray[invocationId];
    if (instanceData.bIsDrawn == 0) { return; }

    Model model = visibilityPassData.models.modelArray[instanceData.modelIndex];
    Primitive primitive = visibilityPassData.primitives.primitiveArray[instanceData.primitiveDataIndex];
    bool bTransparent = primitive.bHasTransparent != 0;

    VkDrawIndexedIndirectCommand cmd;
    cmd.indexCount = primitive.indexCount;
    cmd.firstIndex = primitive.firstIndex;
    cmd.vertexOffset = primitive.vertexOffset;
    cmd.instanceCount = 1;
    cmd.firstInstance = invocationId;

    // "Cast Shadows" flag
    if (model.flags.y == 1){
        uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.shadowCount, 1);
        visibilityPassData.shadowCommands.commandArray[outputIndex] = cmd;
    }

    // "Draw" flag
    if (model.flags.x == 1){
        vec3 worldPosition = primitive.boundingSphere.yzw;
        float radius = primitive.boundingSphere.x;
        vec3 scale = vec3(length(model.currentModelMatrix[0].xyz),
        length(model.currentModelMatrix[1].xyz),
        length(model.currentModelMatrix[2].xyz));
        float maxScale = max(max(scale.x, scale.y), scale.z);
        worldPosition = vec3(model.currentModelMatrix * vec4(worldPosition, 1.0));
        float worldRadius = radius * maxScale;


        bool visible = checkIsVisible(sceneData.viewProj, worldPosition, worldRadius);
        if (push.bEnableFrustumCull == 0){
            visible = true;
        }

        if (visible) {
            if (bTransparent) {
                uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.transparentCount, 1);
                visibilityPassData.transparentCommands.commandArray[outputIndex] = cmd;
            } else {
                uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.opaqueCount, 1);
                visibilityPassData.opaqueCommands.commandArray[outputIndex] = cmd;
            }
        }
    }
}