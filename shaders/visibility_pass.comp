#version 460

#extension GL_EXT_buffer_reference : require

#include "scene.glsl"
#include "structure.glsl"

layout(local_size_x = 64) in;

// layout (std140, set = 0, binding = 0) uniform SceneData - scene.glsl

layout (set = 1, binding = 0) uniform VisibilityPassData
{
    Instances instances;
    Models models;
    PrimitiveData primitives;
    CommandBuffer opaqueCommands;
    CommandBuffer transparentCommands;
    CommandBuffer shadowCommands;
    DrawCounts drawCounts;
} visibilityPassData;


layout (push_constant) uniform PushConstants {
    int bEnableFrustumCull;
} push;

// todo make this only require a single dot product
bool checkIsVisible(mat4 mat, vec3 origin, float radius)
{
    uint plane_index = 0;
    for (uint i = 0; i < 3; ++i)
    {
        for (uint j = 0; j < 2; ++j, ++plane_index)
        {
            if (plane_index == 2 || plane_index == 3)
            {
                continue;
            }
            const float sign  = (j > 0) ? 1.f : -1.f;
            vec4        plane = vec4(0, 0, 0, 0);
            for (uint k = 0; k < 4; ++k)
            {
                plane[k] = mat[k][3] + sign * mat[k][i];
            }
            plane.xyzw /= sqrt(dot(plane.xyz, plane.xyz));
            if (dot(origin, plane.xyz) + plane.w + radius < 0)
            {
                return false;
            }
        }
    }
    return true;
}

void main()
{
    uint invocationId = gl_GlobalInvocationID.x;
    if (invocationId >= visibilityPassData.drawCounts.indirectCount.limit) { return; }

    Instance instanceData = visibilityPassData.instances.instanceArray[invocationId];
    if (instanceData.bIsDrawn == 0) { return; }

    Model model = visibilityPassData.models.modelArray[instanceData.modelIndex];
    Primitive primitive = visibilityPassData.primitives.primitiveArray[instanceData.primitiveDataIndex];
    bool bTransparent = primitive.bHasTransparent != 0;

    VkDrawIndexedIndirectCommand cmd;
    cmd.indexCount = primitive.indexCount;
    cmd.firstIndex = primitive.firstIndex;
    cmd.vertexOffset = primitive.vertexOffset;
    cmd.instanceCount = 1;
    cmd.firstInstance = invocationId;

    // "Cast Shadows" flag
    if (model.flags.y == 1){
        uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.shadowCount, 1);
        visibilityPassData.shadowCommands.commandArray[outputIndex] = cmd;
    }

    // "Draw" flag
    if (model.flags.x == 1){
        vec3 position = primitive.boundingSphere.yzw;
        float radius = primitive.boundingSphere.x;
        vec3 scale = vec3(length(model.currentModelMatrix[0].xyz),
        length(model.currentModelMatrix[1].xyz),
        length(model.currentModelMatrix[2].xyz));
        float maxScale = max(max(scale.x, scale.y), scale.z);
        position = vec3(model.currentModelMatrix * vec4(position, 1.0));
        float worldRadius = radius * maxScale;


        bool visible = checkIsVisible(sceneData.viewProj, position, worldRadius);
        if (push.bEnableFrustumCull == 0){
            visible = true;
        }

        if (visible) {
            if (bTransparent) {
                uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.transparentCount, 1);
                visibilityPassData.transparentCommands.commandArray[outputIndex] = cmd;
            } else {
                uint outputIndex = atomicAdd(visibilityPassData.drawCounts.indirectCount.opaqueCount, 1);
                visibilityPassData.opaqueCommands.commandArray[outputIndex] = cmd;
            }
        }
    }
}