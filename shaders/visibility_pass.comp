#version 460

#extension GL_EXT_buffer_reference : require

#include "scene.glsl"
#include "structure.glsl"

layout(local_size_x = 64) in;

struct MeshBounds
{
    vec3 position;
    float radius;
};

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

layout(buffer_reference, std430) readonly buffer MeshBoundsBuffer
{
    MeshBounds meshBounds[];
};

layout(buffer_reference, std430) buffer CommandBuffer
{
    VkDrawIndexedIndirectCommand commands[];
};

layout(buffer_reference, std430) buffer MeshIndexBuffer
{
    int indices[];
};

// layout (std140, set = 0, binding = 0) uniform SceneData - scene.glsl

layout(set = 1, binding = 0) uniform bufferData
{
    MeshBoundsBuffer boundsBuffer;
    CommandBuffer commandBuffer;
    uint commandBufferCount;
    ModelData modelMatrixBuffer;
    MeshIndexBuffer meshIndices;
    vec3 padding;
} buffers;

layout (push_constant) uniform PushConstants {
    bool enabledFrustumCull;
    bool shadowPass;
} push;

int checkIsVisible(mat4 mat, vec3 origin, float radius)
{
    uint plane_index = 0;
    for (uint i = 0; i < 3; ++i)
    {
        for (uint j = 0; j < 2; ++j, ++plane_index)
        {
            if (plane_index == 2 || plane_index == 3)
            {
                continue;
            }
            const float sign  = (j > 0) ? 1.f : -1.f;
            vec4        plane = vec4(0, 0, 0, 0);
            for (uint k = 0; k < 4; ++k)
            {
                plane[k] = mat[k][3] + sign * mat[k][i];
            }
            plane.xyzw /= sqrt(dot(plane.xyz, plane.xyz));
            if (dot(origin, plane.xyz) + plane.w + radius < 0)
            {
                return 0;
            }
        }
    }
    return 1;
}

void main()
{
    uint invocationId = gl_GlobalInvocationID.x;
    if (invocationId >= buffers.commandBufferCount) { return; }



    uint modelMatrixId = buffers.commandBuffer.commands[invocationId].firstInstance;
    Model models = buffers.modelMatrixBuffer.models[modelMatrixId];

    if (push.shadowPass){
        if (models.flags.y == 0){
            buffers.commandBuffer.commands[invocationId].instanceCount = 0;
            return;
        }

        // don't use frustum cull for shadow pass for now. Not 100% certain its working.
        buffers.commandBuffer.commands[invocationId].instanceCount = 1;
        return;
    } else {
        if (models.flags.x == 0){
            // isVisible = false
            buffers.commandBuffer.commands[invocationId].instanceCount = 0;
            return;
        }
    }




    if (!push.enabledFrustumCull){
        buffers.commandBuffer.commands[invocationId].instanceCount = 1;
        return;
    }

    int meshBoundIndex = buffers.meshIndices.indices[invocationId];
    MeshBounds bounds = buffers.boundsBuffer.meshBounds[meshBoundIndex];

    vec3 position = bounds.position;
    float radius = bounds.radius;
    vec3 scale =  vec3(length(models.currentModelMatrix[0].xyz), length(models.currentModelMatrix[1].xyz), length(models.currentModelMatrix[2].xyz));
    float maxScale = max(max(scale.x, scale.y), scale.z);

    // transform position to clip space
    position = vec3(models.currentModelMatrix * vec4(position, 1.0));
    // scale radius w/ model scale
    float worldRadius = radius * maxScale;

    int visible = checkIsVisible(sceneData.viewProj, position, worldRadius);

    // only ever modify instanceCount to frustum Cull
    buffers.commandBuffer.commands[invocationId].instanceCount = uint(visible);
}