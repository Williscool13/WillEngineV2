#version 460

#include "colors.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D drawImage;
layout (set = 0, binding = 1) uniform sampler2D drawHistory;
layout (set = 0, binding = 2) uniform sampler2D depthImage;
layout (set = 0, binding = 3) uniform sampler2D depthHistory;
layout (set = 0, binding = 4) uniform sampler2D velocityBuffer;
layout (rgba16f, set = 0, binding = 5) uniform image2D outputImage;

layout (push_constant) uniform PushConstants {
    int width;
    int height;
    vec2 texelSize;
    float minBlend;
    float maxBlend;
    float velocityWeight;
    float depthWeight;
} push;

void getNeighborhoodBounds(vec2 uv, out vec3 minColor, out vec3 maxColor) {
    // First pass: gather samples and compute mean
    vec3 mean = vec3(0.0);
    minColor = vec3(1.0);
    maxColor = vec3(0.0);
    vec3 samples[9];
    int sampleCount = 0;

    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            vec2 offset = vec2(x, y) * push.texelSize;
            vec3 sampleRGB = texture(drawImage, uv + offset).rgb;
            vec3 sampleYCoCg = RGBToYCoCg(sampleRGB);

        samples[sampleCount++] = sampleYCoCg;
        minColor = min(minColor, sampleYCoCg);
        maxColor = max(maxColor, sampleYCoCg);
        mean += sampleYCoCg;
        }
    }
    mean /= 9.0;

    // Second pass: compute variance
    vec3 variance = vec3(0.0);
    for (int i = 0; i < 9; i++) {
        vec3 diff = samples[i] - mean;
        variance += diff * diff;
    }
    variance /= 9.0;

    // Compute standard deviation and expand bounds
    vec3 stdDev = sqrt(max(variance, vec3(0.0)));
    stdDev.x *= 1.0;       // Luma (Y)
    stdDev.yz *= 1.25;     // Chroma (Co,Cg)

    minColor = max(minColor, mean - stdDev);
    maxColor = min(maxColor, mean + stdDev);
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= push.width || pixel.y >= push.height) {
        return;
    }
    vec2 uv = (vec2(pixel) + 0.5) * push.texelSize;

    // Get current color
    vec3 currentColorRGB = texture(drawImage, uv).rgb;
    vec3 currentColor = RGBToYCoCg(currentColorRGB);

    // Sample history using velocity
    vec2 velocity = texture(velocityBuffer, uv).rg;
    vec2 historyUv = uv - velocity;

    // Basic history validation
    bool validHistory = all(greaterThanEqual(historyUv, vec2(0.0))) &&
    all(lessThan(historyUv, vec2(1.0)));

    // Get history color
    vec3 historyColor = validHistory ? RGBToYCoCg(texture(drawHistory, historyUv).rgb) : currentColor;

    vec3 minColor, maxColor;
    getNeighborhoodBounds(uv, minColor, maxColor);
    historyColor = clamp(historyColor, minColor, maxColor);

    // Simple static blend factor
    float blend = validHistory ? 0.1 : 1.0; // 10% current, 90% history when valid

    // Blend and convert back to RGB
    vec3 finalColorYCoCg = mix(historyColor, currentColor, blend);
    vec3 finalColorRGB = YCoCgToRGB(finalColorYCoCg);

    imageStore(outputImage, pixel, vec4(finalColorRGB, 1.0));
}