#version 460

#include "colors.glsl"
#include "depth.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D drawImage;
layout (set = 0, binding = 1) uniform sampler2D drawHistory;
layout (set = 0, binding = 2) uniform sampler2D depthImage;
layout (set = 0, binding = 3) uniform sampler2D velocityBuffer;
layout (rgba16f, set = 0, binding = 4) uniform image2D outputImage;

layout (push_constant) uniform PushConstants {
    vec2 texelSize;
    vec2 depthBounds;
    int width;
    int height;
    float minBlend;
    float maxBlend;
    float velocityWeight;
    float zVelocity;
    bool bEnabled;
    int debug;
} push;

vec3 varianceClipping(vec3 oldColor, vec3 newColor, vec2 uv) {
    // https://developer.download.nvidia.com/gameworks/events/GDC2016/msalvi_temporal_supersampling.pdf
    // 3x3 kernel
    const float totalSamples = 9.0;
    vec3 mean = newColor;
    vec3 squaredSum = newColor * newColor;
    vec3 minColor = vec3(1.0);
    vec3 maxColor = vec3(0.0);

    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            if (x == 0 && y == 0) continue;

            vec2 offset = vec2(x, y) * push.texelSize;
            vec3 sampleRGB = texture(drawImage, uv + offset).rgb;
            vec3 sampleYCoCg = RGBToYCoCg(sampleRGB);

            mean += sampleYCoCg;
            squaredSum += sampleYCoCg * sampleYCoCg;

            minColor = min(minColor, sampleYCoCg);
            maxColor = max(maxColor, sampleYCoCg);
        }
    }

    mean /= totalSamples;
    vec3 variance = (squaredSum / totalSamples) - (mean * mean);
    vec3 stddev = sqrt(max(variance, vec3(0.0)));

    vec3 gamma = vec3(1.0, 1.25, 1.25);
    vec3 minc = mean - gamma * stddev;
    vec3 maxc = mean + gamma * stddev;

    minc = max(minc, minColor);
    maxc = min(maxc, maxColor);

    return clamp(oldColor, minc, maxc);
}

float calculateVelocityConfidence(vec2 velocity, vec2 uv) {
    float velocityLength = length(velocity);

    // Disgusting rudimentary heuristic to fix some unbelievably undebuggable distortion/blending at the center area of the screen
    vec2 centerDist = abs(vec2(0.5) - uv);
    float distanceFromCenter = exp(-length(centerDist) * 8.0);
    float zInfluence = abs(push.zVelocity) * distanceFromCenter * 0.25f;
    velocityLength = max(velocityLength, zInfluence);

    return exp(-velocityLength * push.velocityWeight);
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= push.width || pixel.y >= push.height) {
        return;
    }
    vec2 uv = (vec2(pixel) + 0.5) * push.texelSize;

    if (!push.bEnabled) {
        imageStore(outputImage, pixel, texture(drawImage, uv));
        return;
    }

    vec2 velocity = texture(velocityBuffer, uv).rg;
    vec2 historyUv = uv - velocity;
    bool validHistory = all(greaterThanEqual(historyUv, vec2(0.0))) && all(lessThan(historyUv, vec2(1.0)));

    vec3 currentColor = texture(drawImage, uv).rgb;
    vec3 resultRGB;
    float velocityConfidence = 0.0f;


    if (!validHistory) {
        resultRGB = currentColor;
    } else {
        float currentDepth = texture(depthImage, uv).r;
        vec3 historyColor = texture(drawHistory, historyUv).rgb;

        vec3 currentYCoCg = RGBToYCoCg(currentColor);
        vec3 historyYCoCg = RGBToYCoCg(historyColor);
        historyYCoCg = varianceClipping(historyYCoCg, currentYCoCg, uv);

        velocityConfidence = calculateVelocityConfidence(velocity, uv);

        float blend = mix(push.minBlend, push.maxBlend, smoothstep(0.0, 0.2, velocityConfidence));

        vec3 resultYCoCg = mix(currentYCoCg, historyYCoCg, blend);
        resultRGB = YCoCgToRGB(resultYCoCg);
    }



    switch (push.debug) {
        case 1:
            return;
        case 2:
            imageStore(outputImage, pixel, vec4(vec3(validHistory ? 1.0f : 0.0f), 1.0));
            return;
        case 3:
            return;
        case 4:
            imageStore(outputImage, pixel, vec4(vec3(velocityConfidence), 1.0));
            return;
        case 5:
            return;
        default:
            break;
    }

    imageStore(outputImage, pixel, vec4(resultRGB, 1.0));
}