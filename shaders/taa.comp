#version 460

layout (local_size_x = 16, local_size_y = 16) in;


layout (set = 0, binding = 0) uniform sampler2D currentFrame;    // Your drawImage result
layout (set = 0, binding = 1) uniform sampler2D historyFrame;    // Previous frame
layout (set = 0, binding = 2) uniform sampler2D velocityBuffer;  // Motion vectors

layout (rgba16f, set = 0, binding = 3) uniform image2D outputImage;  // taaResult

layout (push_constant) uniform PushConstants {
    int width;
    int height;
    vec2 texelSize;
    float blendFactor;
} push;

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= push.width || pixel.y >= push.height) {
        return;
    }

    // Get current pixel UV
    vec2 uv = (vec2(pixel) + 0.5) * push.texelSize;

    // Sample current frame
    vec3 currentColor = texture(currentFrame, uv).rgb;

    // Get velocity and find where this pixel was in previous frame
    vec2 velocity = texture(velocityBuffer, uv).rg;
    vec2 historyUv = uv - velocity;

    // Check if reprojected UV is within bounds
    bool validHistory = all(greaterThanEqual(historyUv, vec2(0.0))) &&
    all(lessThan(historyUv, vec2(1.0)));

    // Sample history (use current color if history is invalid)
    vec3 historyColor = validHistory ? texture(historyFrame, historyUv).rgb : currentColor;

    // Simple box clamp to prevent ghosting
    vec3 minColor = currentColor;
    vec3 maxColor = currentColor;

    // Sample 3x3 neighborhood
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            if (x == 0 && y == 0) continue; // Skip center (already sampled)

            vec2 offset = vec2(x, y) * push.texelSize;
            vec3 neighborColor = texture(currentFrame, uv + offset).rgb;

            minColor = min(minColor, neighborColor);
            maxColor = max(maxColor, neighborColor);
        }
    }

    // Clamp history color to neighborhood bounds
    historyColor = clamp(historyColor, minColor, maxColor);

    // Simple blend between history and current
    float blend = validHistory ? push.blendFactor : 1.0;
    vec3 finalColor = mix(historyColor, currentColor, blend);

    imageStore(outputImage, pixel, vec4(finalColor, 1.0));
}