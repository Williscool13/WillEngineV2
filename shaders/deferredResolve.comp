#version 460
#extension GL_EXT_nonuniform_qualifier: enable

#include "scene.glsl"
#include "pbr.glsl"
#include "environment.glsl"
#include "lights.glsl"
#include "shadows.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

// layout (std140, set = 0, binding = 0) uniform SceneData - scene.glsl

layout (set = 1, binding = 0) uniform sampler2D normalRenderTarget;
layout (set = 1, binding = 1) uniform sampler2D albedoRenderTarget;
layout (set = 1, binding = 2) uniform sampler2D pbrRenderTarget;
layout (set = 1, binding = 3) uniform sampler2D depthBuffer;
layout (set = 1, binding = 4) uniform sampler2D velocityBuffer;// velocity buffer is not actually used in this deferred resolve
layout (set = 1, binding = 5) uniform sampler2D aoBuffer;
layout (set = 1, binding = 6) uniform sampler2D contactShadowBuffer;

layout (rgba16f, set = 1, binding = 7) uniform image2D outputImage;

layout (set = 2, binding = 0) uniform samplerCube environmentDiffuseAndSpecular;
layout (set = 2, binding = 1) uniform sampler2D lut;

layout (std140, set = 3, binding = 0) uniform ShadowCascadeData {
    CascadeSplit cascadeSplits[4];
    mat4 lightViewProj[4];
    DirectionalLight directionalLightData;// w is intensity
    float nearShadowPlane;
    float farShadowPlane;
    vec2 pad;
} shadowCascadeData;

layout (set = 4, binding = 0) uniform sampler2DShadow shadowMapSampler[4];

//layout (std140, set = 5, binding = 0) uniform LightData {
//    PointLight pointLights[6];
//} lightData;
//
//layout (set = 6, binding = 0) uniform sampler2D shadowMaps[];


layout (push_constant) uniform PushConstants {
    int width;
    int height;
    int debug;
    int disableShadows;
    int disableContactShadows;
    int pcfLevel;
    float nearPlane;
    float farPlane;
} pushConstants;

vec3 reconstructPosition(vec2 uv, float ndcDepth) {
    // Get normalized device coordinates
    vec2 ndc = uv * 2.0 - 1.0;

    // Reconstruct view-space position
    vec4 positionVS = sceneData.invProjection * vec4(ndc, ndcDepth, 1.0);
    positionVS /= positionVS.w;

    return positionVS.xyz;
}

void main() {
    // All calculations are done in View Space unless explicitly declared otherwise
    ivec2 screenPos = ivec2(gl_GlobalInvocationID.xy);
    if (screenPos.x > pushConstants.width || screenPos.y > pushConstants.height) {
        return;
    }

    vec2 uv = (vec2(screenPos) + 0.5) * sceneData.texelSize;
    vec4 albedo = texture(albedoRenderTarget, uv);
    if (albedo.w != 1) {
        if (pushConstants.debug == 2) {
            vec2 velocity = texture(velocityBuffer, uv).rg * 10.0;
            vec4 debugColor = vec4(velocity.x, velocity.y, 0.0, 0.0);
            imageStore(outputImage, screenPos, debugColor);
            return;
        }

        imageStore(outputImage, screenPos, albedo);
        return;
    }
    float depth = texture(depthBuffer, uv).r;
    vec3 viewNormal = texture(normalRenderTarget, uv).rgb;
    vec4 pbrData = texture(pbrRenderTarget, uv);
    vec3 viewPosition = reconstructPosition(uv, depth);

    float roughness = pbrData.g;
    float metallic = pbrData.r;
    float emissive = pbrData.b;
    bool hasTransparent = pbrData.a == 1;


    vec3 N = normalize(viewNormal);
    vec3 V = normalize(-viewPosition);

    // for point lights, light.pos - inPosition
    vec3 L = normalize(mat3(sceneData.view) * normalize(-shadowCascadeData.directionalLightData.direction));
    vec3 H = normalize(V + L);

    // SPECULAR
    float NDF = D_GGX(N, H, roughness);
    float G = G_SCHLICKGGX_SMITH(N, V, L, roughness);
    vec3 F0 = mix(vec3(0.04), albedo.xyz, metallic);
    vec3 F = F_SCHLICK(V, H, F0);

    vec3 numerator = NDF * G * F;
    float denominator = 4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f);
    vec3 specular = numerator / max(denominator, 0.001f);

    vec3 kS = F;
    vec3 kD = vec3(1.0f) - kS;
    kD *= 1.0f - metallic;

    // DIFFUSE
    float nDotL = max(dot(N, L), 0.0f);
    vec3 diffuse = Lambert(kD, albedo.xyz);

    // SHADOWS
    float offset = 0.05f;
    float normalOffsetScale = max(offset, dot(N, L) * offset);
    vec3 offsetPosition = viewPosition + N * normalOffsetScale;
    vec4 worldPosition = sceneData.invView * vec4(offsetPosition, 1.0f);
    //float _tempShadowFactor = getShadowFactorBlend(pushConstants.pcfLevel, worldPosition.xyz, abs(viewPosition.z), shadowCascadeData.cascadeSplits, shadowCascadeData.lightViewProj, shadowMapSampler, shadowCascadeData.nearShadowPlane, shadowCascadeData.farShadowPlane);
    //float shadowFactor = clamp(smoothstep(-0.15f, 0.5f, dot(N, L)) * _tempShadowFactor, 0, 1);

    float shadowFactor = getShadowFactorBlend(pushConstants.pcfLevel, worldPosition.xyz, abs(viewPosition.z), shadowCascadeData.cascadeSplits, shadowCascadeData.lightViewProj, shadowMapSampler, shadowCascadeData.nearShadowPlane, shadowCascadeData.farShadowPlane);
    if (pushConstants.disableShadows == 1){
        shadowFactor = 1.0f;
    }
    float contactShadow = texture(contactShadowBuffer, uv).r;
    if (pushConstants.disableContactShadows == 1){
        contactShadow = 1.0f;
    }

    shadowFactor = min(shadowFactor, contactShadow);

    // Direct lighting with shadows
    vec3 directLight = (diffuse + specular) * nDotL * shadowFactor * shadowCascadeData.directionalLightData.intensity * shadowCascadeData.directionalLightData.color;

    // IBL Reflections
    vec3 worldN = normalize(mat3(sceneData.invView) * N);
    vec3 irradiance = DiffuseIrradiance(environmentDiffuseAndSpecular, worldN);
    vec3 reflectionDiffuse = irradiance * albedo.xyz;
    vec3 reflectionSpecular = SpecularReflection(environmentDiffuseAndSpecular, lut, V, N, sceneData.invView, roughness, F);

    float ao = 1.0f;
    if (!hasTransparent) {
        ao = texture(aoBuffer, uv).r;
    }
    vec3 ambient = (kD * reflectionDiffuse + reflectionSpecular) * ao;
    vec3 finalColor = directLight + ambient;

    imageStore(outputImage, screenPos, vec4(finalColor, albedo.w));


    switch (pushConstants.debug) {
        case 1:
        float zNear = pushConstants.farPlane;
        float zFar = pushConstants.nearPlane / 10.0;
        float d = 1 - depth;
        float ld = (2.0 * zNear) / (zFar + zNear - d * (zFar - zNear));
        imageStore(outputImage, screenPos, vec4(vec3(ld), 1.0f));
        break;
        case 2:
        vec2 velocity = texture(velocityBuffer, uv).rg * 10.0;
        vec4 debugColor = vec4(velocity.x, velocity.y, 0.0, 0.0);
        imageStore(outputImage, screenPos, debugColor);
        break;
        case 3:
        imageStore(outputImage, screenPos, albedo);
        break;
        case 4:
        imageStore(outputImage, screenPos, vec4(worldN * 0.5f + 0.5f, 1.0f));
        break;
        case 5:
        imageStore(outputImage, screenPos, pbrData);
        break;
        case 6:
        imageStore(outputImage, screenPos, vec4(vec3(shadowFactor), 1.0f));
        break;
        case 7:
        float viewDepth = abs(viewPosition.z);
        int cascadeLevel = selectCascadeLevel(viewDepth, shadowCascadeData.cascadeSplits);
        float value = viewDepth - shadowCascadeData.cascadeSplits[cascadeLevel].nearPlane;
        float diff = value / (shadowCascadeData.cascadeSplits[cascadeLevel].farPlane - shadowCascadeData.cascadeSplits[cascadeLevel].nearPlane);
        if (cascadeLevel == 0) { imageStore(outputImage, screenPos, vec4(vec3(diff, 0.0, 0.0), albedo.w)); }
        if (cascadeLevel == 1) { imageStore(outputImage, screenPos, vec4(vec3(0.0, diff, 0.0), albedo.w)); }
        if (cascadeLevel == 2) { imageStore(outputImage, screenPos, vec4(vec3(0.0, 0.0, diff), albedo.w)); }
        if (cascadeLevel == 3) { imageStore(outputImage, screenPos, vec4(vec3(diff, diff, 0.0), albedo.w)); }
        if (cascadeLevel == 4) { imageStore(outputImage, screenPos, vec4(1.0, 0.0, 1.0, 1.0)); }
        break;
        case 8:
        imageStore(outputImage, screenPos, vec4(vec3(dot(N, L)), 1.0));
        break;
        case 9:
        float ao = texture(aoBuffer, uv).r;
        imageStore(outputImage, screenPos, vec4(vec3(ao), 1.0f));
        break;
        case 10:
        float contactShadow = texture(contactShadowBuffer, uv).r;
        imageStore(outputImage, screenPos, vec4(vec3(contactShadow), 1.0f));
        break;

    }
}