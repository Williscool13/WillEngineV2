#version 460

#include "pbr.glsl"
#include "environment.glsl"
#include "lights.glsl"
#include "scene.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

// layout (std140, set = 0, binding = 0) uniform SceneData - scene.glsl

layout (set = 1, binding = 0) uniform sampler2D normalRenderTarget;
layout (set = 1, binding = 1) uniform sampler2D albedoRenderTarget;
layout (set = 1, binding = 2) uniform sampler2D pbrRenderTarget;
layout (set = 1, binding = 3) uniform sampler2D depthBuffer;
layout (set = 1, binding = 4) uniform sampler2D velocityBuffer; // velocity buffer is not actually used in this deferred resolve

layout (rgba16f, set = 1, binding = 5) uniform image2D outputImage;

layout (std140, set = 2, binding = 0) uniform SceneDatae {
    float dummy;
} dummy;
/**layout (std140, set = 2, binding = 0) uniform LightData {
    DirectionalLight mainLight;
    PointLight pointLights[6];
} lightData;*/

layout (set = 3, binding = 0) uniform samplerCube environmentDiffuseAndSpecular;
layout (set = 3, binding = 1) uniform sampler2D lut;

layout (push_constant) uniform PushConstants {
    int width;
    int height;
    int debug;
} pushConstants;

vec3 reconstructPosition(ivec2 texCoord, float depth) {
    // Get normalized device coordinates
    vec2 texSize = vec2(pushConstants.width, pushConstants.height);
    vec2 ndc = (vec2(texCoord) + 0.5) / texSize * 2.0 - 1.0;

    // Reconstruct view-space position
    vec4 positionVS = sceneData.invProjection * vec4(ndc, depth, 1.0);
    positionVS /= positionVS.w;

    // Transform to world-space
    vec4 positionWS = sceneData.invView * positionVS;

    return positionWS.xyz;
}

float LinearizeDepth(float depth)
{
    float near = 10000.0;
    float far = 0.01;
    float z = depth * 2.0 - 1.0; // Convert to NDC
    return (2.0 * near * far) / (far + near - z * (far - near));
}

void main() {
    ivec2 screenPos = ivec2(gl_GlobalInvocationID.xy);
    if (screenPos.x > pushConstants.width || screenPos.y > pushConstants.height) {
        return;
    }

    vec2 uv = (vec2(screenPos) + 0.5) / vec2(pushConstants.width, pushConstants.height);
    vec4 albedo = texture(albedoRenderTarget, uv);
    if (albedo.w != 1) {
        return;
    }
    float depth = texture(depthBuffer, uv).r;
    vec3 normal = texture(normalRenderTarget, uv).rgb;
    vec4 pbrData = texture(pbrRenderTarget, uv);
    vec3 position = reconstructPosition(screenPos, depth);

    float roughness = pbrData.g;
    float metallic = pbrData.r;
    float emissive = pbrData.b;


    vec3 N = normal;
    vec3 V = normalize(sceneData.cameraPos.xyz - position);


    vec3 mainLightDirTest = normalize(vec3(0.5f, 0.5f, 0.0f));
    vec3 L = normalize(mainLightDirTest); // for point lights, light.pos - inPosition
    //vec3 L = normalize(lightData.mainLight.direction); // for point lights, light.pos - inPosition
    vec3 H = normalize(V + L);

    // SPECULAR
    float NDF = D_GGX(N, H, roughness);
    float G = G_SCHLICKGGX_SMITH(N, V, L, roughness);
    vec3 F0 = mix(vec3(0.04), albedo.xyz, metallic);
    vec3 F = F_SCHLICK(V, H, F0);

    vec3 numerator = NDF * G * F;
    float denominator = 4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f);
    vec3 specular = numerator / max(denominator, 0.001f);

    vec3 kS = F;
    vec3 kD = vec3(1.0f) - kS;
    kD *= 1.0f - metallic;

    // DIFFUSE
    float nDotL = max(dot(N, L), 0.0f);
    vec3 diffuse = Lambert(kD, albedo.xyz);

    // IBL REFLECTIONS
    vec3 irradiance = DiffuseIrradiance(environmentDiffuseAndSpecular, N);
    vec3 reflectionDiffuse = irradiance * albedo.xyz;

    vec3 reflectionSpecular = SpecularReflection(environmentDiffuseAndSpecular, lut, V, N, roughness, F);
    vec3 ambient = (kD * reflectionDiffuse + reflectionSpecular);

    vec3 finalColor = (diffuse + specular) * vec3(1.0f) * nDotL;
    //vec3 finalColor = (diffuse + specular) * lightData.mainLight.color * nDotL;
    finalColor += ambient;

    imageStore(outputImage, screenPos, vec4(finalColor, albedo.w));

    if (pushConstants.debug == 1) {
        // Velocity
        vec2 velocity = texture(velocityBuffer, uv).rg * 10.0;
        vec4 debugColor = vec4(velocity.x, velocity.y, 0.0, 0.0);
        imageStore(outputImage, screenPos, debugColor);
        return;
    }
    else if (pushConstants.debug == 2) {
        // Depth
        float linearDepth = LinearizeDepth(depth);
        float normalizedLinearDepth = linearDepth / 25.0;
        vec4 fragColor = vec4(vec3(normalizedLinearDepth), 1.0);
        imageStore(outputImage, screenPos, vec4(vec3(normalizedLinearDepth), 1.0f));
        return;
    }
}