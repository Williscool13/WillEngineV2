#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D inputImage;
layout (rgba16f, set = 0, binding = 1) uniform image2D outputImage;


layout (push_constant) uniform PushConstants {
    int width;
    int height;
    uint flags;
} push;

vec3 linearToSRGB(vec3 linearRGB) {
    return mix(
        12.92 * linearRGB,
        1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055,
        step(0.0031308, linearRGB)
    );
}

vec3 sharpen(vec3 centerColor, vec2 texelSize, vec2 uv) {
    // Sample neighboring pixels
    vec3 n = texture(inputImage, uv + vec2(0, -texelSize.y)).rgb;
    vec3 s = texture(inputImage, uv + vec2(0, texelSize.y)).rgb;
    vec3 e = texture(inputImage, uv + vec2(texelSize.x, 0)).rgb;
    vec3 w = texture(inputImage, uv + vec2(-texelSize.x, 0)).rgb;

    float sharpenStrength = 0.5; // Adjust this value
    vec3 sharpened = centerColor * (1.0 + 4.0 * sharpenStrength) - (n + s + e + w) * sharpenStrength;
    return max(vec3(0.0), sharpened); // Prevent negative values
}


vec3 reinhardTonemap(vec3 v) {
    return v / (1.0f + v);
}

vec3 aces(vec3 x) {
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= push.width || pixel.y >= push.height) {
        return;
    }

    vec2 uv = (vec2(pixel.x, pixel.y) + 0.5) / vec2(push.width, push.height);
    //uv.y = 1 - uv.y;
    vec3 color = texture(inputImage, uv).rgb;
    vec2 texelSize = 1.0 / vec2(push.width, push.height);

    if (push.flags == 0) {
        imageStore(outputImage, pixel, vec4(color, 1.0));
        return;
    }

    if ((push.flags & 2) != 0) {
        color = sharpen(color, texelSize, uv);
    }

    if ((push.flags & 1) != 0) {
        //color = reinhardTonemap(color);
        color = aces(color);
    }

    imageStore(outputImage, pixel, vec4(color, 1.0));
}