#version 460

#include "common.glsl"
#include "scene.glsl"
#include "fxaa.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 1, binding = 0) uniform sampler2D inputImage;
layout (rgba16f, set = 1, binding = 1) uniform image2D outputImage;


layout (push_constant) uniform PushConstants {
    int width;
    int height;
    uint flags;
} push;


vec3 sharpen(vec3 centerColor, vec2 texelSize, vec2 uv) {
    // Sample neighboring pixels
    vec3 n = texture(inputImage, uv + vec2(0, -texelSize.y)).rgb;
    vec3 s = texture(inputImage, uv + vec2(0, texelSize.y)).rgb;
    vec3 e = texture(inputImage, uv + vec2(texelSize.x, 0)).rgb;
    vec3 w = texture(inputImage, uv + vec2(-texelSize.x, 0)).rgb;

    if ((push.flags & 1) != 0) {
        n = aces(n);
        s = aces(s);
        e = aces(e);
        w = aces(w);
    }

    float sharpenStrength = 0.5;// Adjust this value
    vec3 sharpened = centerColor * (1.0 + 4.0 * sharpenStrength) - (n + s + e + w) * sharpenStrength;
    return max(vec3(0.0), sharpened);// Prevent negative values
}


void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= push.width || pixel.y >= push.height) {
        return;
    }

    vec2 uv = (vec2(pixel.x, pixel.y) + 0.5) / sceneData.renderTargetSize;
    // Flip final image (cause vulkan images starts from top-left)
    uv.y = 1 - uv.y;

    // Unjitter
    uv += sceneData.jitter.xy / 2.0f;

    vec3 color = texture(inputImage, uv).rgb;

    if ((push.flags & 1) != 0) {
        //color = reinhardTonemap(color);
        color = aces(color);
    }

    if ((push.flags & 4) != 0) {
        bool tonemapActive = (push.flags & 1) != 0;
        color = FXAA_Apply(color, inputImage, uv, sceneData.texelSize, tonemapActive);
    }

    if ((push.flags & 2) != 0) {
        color = sharpen(color, sceneData.texelSize, uv);
    }




    imageStore(outputImage, pixel, vec4(color, 1.0));
}